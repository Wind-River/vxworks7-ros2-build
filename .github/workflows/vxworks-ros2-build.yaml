# This is a workflow for the VxWorks ROS 2 build.
# It builds a ROS 2 VxWorks port against the VxWorks SDK 

name: 'VxWorks ROS 2 build'
run-name: Build ${{ inputs.ros_distro }} ${{ inputs.sdk }}

on:
  workflow_dispatch:
    inputs:
      ros_distro:
        description: 'ROS 2 Distribution'
        required: true
        default: 'humble'
      sdk:
        description: 'SDK Name'
        required: true
        default: 'wrsdk-vxworks7-qemu-1.13.2'
      test:
        description: 'Run tests'
        required: false
        default: false

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      ros_distro: ${{ github.event.inputs.ros_distro }}
      sdk: ${{ github.event.inputs.sdk }}
      test: ${{ github.event.inputs.test }}
    steps:

      - name: Checks-out a branch ${{ github.ref }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Fetch SDK details for ${{ env.sdk }}
        run: |
          url=$(jq -r --arg sdk "${{ env.sdk }}" '.sdks[] | select(.name == $sdk) | .url' .github/workflows/sdks.json)
          if [ -z "$url" ]; then
            echo "URL not found for ${{ env.sdk }}. Stopping workflow."
            echo "::error::URL not found for ${{ env.sdk }}"
            exit 1
          fi
          script=$(jq -r --arg sdk "${{ env.sdk }}" '.sdks[] | select(.name == $sdk) | .script' .github/workflows/sdks.json)
          image=$(jq -r --arg sdk "${{ env.sdk }}" '.sdks[] | select(.name == $sdk) | .image' .github/workflows/sdks.json)
          echo "url=$url" >> $GITHUB_ENV
          echo "script=$script" >> $GITHUB_ENV
          echo "image=$image" >> $GITHUB_ENV

      - name: Download the ${{ env.sdk }} SDK
        uses: carlosperate/download-file-action@v1
        with:
          file-url: '${{ env.url }}'
          location: '/tmp'

      - name: Extract the ${{ env.sdk }} SDK
        run: |
          mkdir -p /tmp/wrsdk
          cd /tmp/wrsdk
          tar xvfj /tmp/${{ env.sdk }}.tar.bz2 --strip 1

      - name: store runners uid and gid
        run: |
          echo "`id -u`" > /tmp/wrsdk/uid
          echo "`id -g`" > /tmp/wrsdk/gid

      - name: Build vxbuild docker image
        uses: docker/build-push-action@v3
        with:
          context: Docker/22.04/vxbuild/.
          push: false
          tags: vxbuild:22.04

      - name: Build vxros2build docker image
        uses: docker/build-push-action@v3
        with:
          context: Docker/22.04/vxros2build/.
          push: false
          build-args: ROS_DISTRO=${{ env.ros_distro }}
          tags: vxros2build:${{ env.ros_distro }}

      - name: Build ROS 2 ${{ env.ros_distro }} against VxWorks ${{ env.sdk }}
        uses: addnab/docker-run-action@v3
        with:
          image: vxros2build:${{ env.ros_distro }}
          options: -v ${{ github.workspace }}:/work -v /tmp/wrsdk:/wrsdk
          run:  |
            groupadd -g "`cat /wrsdk/gid`" wruser
            useradd -u "`cat /wrsdk/uid`" -m wruser -g wruser
            su wruser -c 'source /wrsdk/sdkenv.sh && make -C /work'

#      - name: Build ROS 2 ${{ env.ros_distro }} against VxWorks ${{ env.sdk }}
#        env:
#          UID: ${{ env.uid }}
#          GID: ${{ env.gid }}
#        uses: docker://razr/vxros2build:${{ env.ros_distro }}
#        with:
#          args: source /github/home/wrsdk/${{ env.script }} && make -C /github/workspace

      - name: Create an HDD image
        run: |
          sudo apt-get update
          sudo apt-get install -y dosfstools
          cd ${{ github.workspace }}
          dd if=/dev/zero of=ros2.img count=2048 bs=1M
          mkfs.vfat -F 32 ./ros2.img
          mkdir -p /tmp/mount
          sudo mount -o loop -t vfat ./ros2.img /tmp/mount
          sudo cp -r -L ./output/export/deploy/* /tmp/mount/.
          df -h /tmp/mount/
          sudo umount /tmp/mount

      - name: Prepare artifacts
        run: |
          cp /tmp/wrsdk/${{ env.image }} ${{ github.workspace }}

      - name: Upload VxWorks and the HDD image
        uses: actions/upload-artifact@v3
        with:
          name: HDD image ${{ env.sdk }} ${{ env.ros_distro }}
          path: |
            ${{ github.workspace }}/ros2.img
            ${{ github.workspace }}/vxWorks

      - name: Run Tests with QEMU and expect
        if: ${{ env.test == 'true' }}
        run: |
          # Change directory to GitHub workspace
          cd ${{ github.workspace }}

          # Update apt and install dependencies
          sudo apt-get update
          sudo apt-get install -y qemu-system-x86 expect

          # Add user to kvm group
          sudo usermod -aG kvm $USER

          # Run tests
          echo "Running tests..."
          ./tests/main_script.exp
